#!/usr/bin/env python

from __future__ import annotations
import datetime
import os
from typing import List
from pytube import YouTube, StreamQuery, Stream
from moviepy.editor import AudioFileClip
from config import Config


def main(args: list | None = None):
    """
    Main function

    ### Command Line Arguments

    pythontube <video_url> [switch]...

    #### Switches

    - `-y`: Default flag to download video (lowest priority switch)
    - `--audio-only`: Download audio only
    - `--data-saver`: Download video in 720p or lower and/or audio in 128kbps or lower
    - `--timeout <seconds>`: Timeout for the download in seconds

    #### Examples

    `pythontube https://www.youtube.com/watch?v=Kp7eSUU9oy8 -y`
    `pythontube https://www.youtube.com/watch?v=Kp7eSUU9oy8 --data-saver --audio-only --timeout 8`

    ### Pytube v12 problem solution
    https://stackoverflow.com/questions/68945080/pytube-exceptions-regexmatcherror-get-throttling-function-name-could-not-find

    ### Note
    this script is working as of 23/04/2022
    """
    try:
        # prompt user for video url
        while True:
            if len(args) >= 1:
                if args[0].startswith("-"):
                    raise Exception("Invalid input")
                url = args[0]
                break
            else:
                url = input("Enter youtube link: ")
                if url != "":
                    break

        yt_video = YouTube(url)
        yt_video.bypass_age_gate()

        print_yt_video_info(yt_video)

        is_audio_only, is_data_saver, timeout = get_user_inputs(args)

        # more yt_video setup
        yt_video.register_on_progress_callback(on_progress)
        yt_video.register_on_complete_callback(on_complete)
        # get streams - StreamQuery Object
        streams = yt_video.streams

        # initialize Config object
        config = Config("pythontube")

        if is_audio_only:
            download_audio_only(streams, config, is_data_saver, timeout)
        else:
            download_video(streams, config, is_data_saver, timeout)
    except KeyboardInterrupt:
        print("\nExiting...")
        exit()


def print_yt_video_info(yt_video: YouTube):
    print("\n============================================================\n")
    print(f"  {yt_video.title}")
    print(f"  {yt_video.author}\n")
    print(
        f"  {yt_video.views} views - {datetime.datetime.strftime(yt_video.publish_date, '%b %d, %Y')}")
    print(f"  {yt_video.length // 60}:{yt_video.length % 60:02d}")
    print("\n============================================================\n")


def get_user_inputs(args: list | None):
    # get download type
    while True:
        print("\nEnter download type (default: 1)")
        print("1. Video and audio")
        print("2. Audio only")
        if "--audio-only" in args:
            dt = 2
            print(f": {dt}")
        elif "-y" in args:
            dt = 1
            print(f": {dt}")
        else:
            dt = int(input(": "))
        if dt == 1:
            is_audio_only = False
        elif dt == 2:
            is_audio_only = True
        else:
            print("Invalid input\n")
            continue
        break

    # get download quality
    while True:
        print("\nEnter download quality (default: 1)")
        print("1. Highest quality")
        print("2. Data saver")
        if "--data-saver" in args:
            dq = 2
            print(f": {dq}")
        elif "-y" in args:
            dq = 1
            print(f": {dq}")
        else:
            dq = int(input(": "))
        if dq == 1:
            is_data_saver = False
        elif dq == 2:
            is_data_saver = True
        else:
            print("Invalid input\n")
            continue
        break

    # get download timeout
    print(f"\nEnter download timeout (default: 60)")
    if "-y" in args:
        timeout = 60
        print(f": {timeout}")
    elif "--timeout" in args:
        to_switch_index = args.index("--timeout")
        if to_switch_index + 1 >= len(args):
            raise Exception("Too few arguments")
        timeout = int(args[to_switch_index + 1])
        print(f": {timeout}")
    else:
        timeout = int(input(f": "))
    print()
    return is_audio_only, is_data_saver, timeout


# Core functions
def download_video(streams: StreamQuery, config: Config, data_saver: bool, timeout: int):
    # Using Filters on the myVideoStream Object
    if data_saver:
        options: List[Stream] = [
            streams.filter(file_extension="mp4",
                           resolution="720p", fps=60, abr="128kbps"),
            streams.filter(file_extension="mp4",
                           resolution="720p", abr="128kbps"),
            streams.filter(file_extension="mp4", resolution="720p"),
            streams.filter(file_extension="mp4", abr="128kbps"),
            streams.filter(file_extension="mp4"),
        ]
        for option in options:
            mp4_stream = option
            if mp4_stream:
                break
    else:
        mp4_stream = streams.get_highest_resolution()
    _download_stream(mp4_stream, config, timeout)


def download_audio_only(streams: StreamQuery, config: Config, data_saver: bool, timeout: int):
    # Filtering only audio streams
    if data_saver:
        audio_stream = (streams.filter(only_audio=True, abr="128kbps")
                        or streams.filter(only_audio=True)).first()
    else:
        audio_stream = streams.get_audio_only()
    file_path = _download_stream(audio_stream, config, timeout)
    convert_mp4_to_mp3(file_path)


def _download_stream(stream: Stream, config: Config, timeout: int):
    print("\nDownloading stream...\n")
    print(f"{stream}\n")
    # create file name
    timestamp = datetime.datetime.now().strftime("%Y_%m_%d_%H_%M_%S")
    file_path, file_ext = split_file_path_from_ext(stream.default_filename)
    file_path = f"{file_path}_{timestamp}.{file_ext}"
    # download
    return stream.download(config.data["output_dir_path"],
                           filename=file_path,
                           timeout=timeout)


# Callbacks
def on_progress(stream, chunk, bytes_remaining):
    # print(f"\rDownloading: {bytes_remaining} bytes remaining", end="")
    print(f"Downloading: {bytes_remaining} bytes remaining")


def on_complete(stream, file_path):
    print("\n\n============================================================\n")
    print("Download complete!\n")
    print(f"File saved to: {file_path}")
    print("\n============================================================\n")


# Utilities
def split_file_path_from_ext(file_path):
    file_path_ext = file_path.split(".")
    file_path, file_ext = ".".join(file_path_ext[:-1]), file_path_ext[-1]
    return file_path, file_ext


def convert_mp4_to_mp3(file_path):
    AUDIO_FILE_EXT = "mp3"
    audio_file_clip = AudioFileClip(file_path)

    video_file_path, video_file_ext = split_file_path_from_ext(file_path)
    audio_file_path = f"{video_file_path}.{AUDIO_FILE_EXT}"

    audio_file_clip.write_audiofile(audio_file_path)
    audio_file_clip.close()

    os.remove(file_path)

    print("\n============================================================\n")
    print("Converted mp4 to mp3\n")
    print(f"File saved to: {file_path}")
    print("\n============================================================\n")


if __name__ == '__main__':
    import sys
    main(sys.argv[1:])
